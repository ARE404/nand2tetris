// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // specify instruction type
    And (a=true, b=instruction[15], out=isInsC);
    Not (in=isInsC, out=isInsA);

    // specify C instruction input value type, A or M
    And (a=instruction[12], b=true, out=inputType);

    // specify where we store the output of ALU, A\D\M
    And (a=instruction[5], b=isInsC, out=storeInA);
    And (a=instruction[4], b=isInsC, out=storeInD);
    And (a=instruction[3], b=isInsC, out=writeM);

    // compute jump conditions
    // no jmp
    Not (in=true, out=nojmp);
    // jmp
    Not (in=false, out=jmp);
    // zero
    And (a=jmp, b=zrout, out=jeq);
    // negtive
    And (a=jmp, b=ngout, out=jlt);
    // not zero
    Not (in=jeq, out=jne);
    // positive
    Not (in = jle, out=jgt);
    // not negtive
    Or (a=zrout, b=jgt, out=jge);
    // not positive
    Or (a=zrout, b=ngout, out=jle);

    // whether need jump
    Mux8Way (a=nojmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp, sel=instruction[0..2], out=maybeJump);
    And (a=isInsC, b=maybeJump, out=shouldJump);

    // load to reg A
    Mux16 (a = aluout, b = instruction, sel = isInsA, out = m1out);
    // modify A reg if isInsA or storeInA
    Or (a = isInsA, b = storeInA, out = loada);
    ARegister (in = m1out, load = loada, out = aout, out[0..14] = addressM);

    // reg D
    DRegister (in = aluout, load = storeInD, out = dout);

    // select ALU input, inputType = 0, A, 1, M
    Mux16 (a = aout, b = inM, sel = inputType, out = aluinput);

    ALU (x = dout, y = aluinput, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluout, zr = zrout, ng = ngout);

    And16 (a = aluout, b = true, out = outM);
    PC (in = aout, load = shouldJump, inc = true, reset = reset, out[0..14] = pc);
}